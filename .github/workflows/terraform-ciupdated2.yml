# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#hello
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform GitHub Actions'
defaults:
    run:
      working-directory: "AppService"

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
   terraform:
     runs-on: ${{matrix.os}}
     strategy:
       matrix: 
         os: [ubuntu-latest]
     

     env:
       TF_VAR_client_id: ${{ secrets.TF_VAR_client_id }} 
       TF_VAR_client_secret: ${{ secrets.TF_VAR_client_secret }} 
       TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
       TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }} 

     steps:
       # - name: 'Checkout'
       - uses: actions/checkout@master
       - name: 'Terraform Init'
         # uses: hashicorp/terraform-github-actions@master
         id: init
         run: terraform init
       
       - name: Terraform Format
         id: format
         run: terraform fmt 
       
       - name: Terraform Validate
         id: validate
         run: terraform validate 

       - name: Terraform Plan
         id: plan
         if: github.event_name == 'pull_request'
         run: terraform plan 
         continue-on-error: true

       -  uses: actions/github-script@0.9.0
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
              <details><summary>Show Plan</summary>
              
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
              
              </details>
              
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })


       - name: Terraform Plan Status
         id: planstatus
         if: steps.plan.outcome == 'failure'
         run: exit 1

       - name: Terraform Apply
         id: Apply
         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
         run: terraform apply --auto-approve
          

       - name: Terraform Destroy
         id: destroy
         run: terraform destroy --auto-approve
         continue-on-error: false